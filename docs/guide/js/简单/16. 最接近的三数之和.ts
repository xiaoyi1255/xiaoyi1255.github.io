// 给你一个长度为 n 的整数数组 nums 和 一个目标值 target。请你从 nums 中选出三个整数，使它们的和与 target 最接近。
// 返回这三个数的和。
// 假定每组输入只存在恰好一个解。
// 示例 1：
// 输入：nums = [-1,2,1,-4], target = 1
// 输出：2
// 解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。
// 示例 2：
// 输入：nums = [0,0,0], target = 1
// 输出：0

function threeSumClosest(nums: number[], target: number): number {
  let sum = nums[0] + nums[1] + nums[2]
  if (nums.length == 3) return sum
  nums.sort((a, b) => a - b)
  for (let i = 0; i < nums.length-2; i++) {
    let left = i + 1
    let right = nums.length - 1
    while (left<right) {
      const newSum = nums[i] + nums[left] + nums[right]
      const update = Math.abs(newSum - target)
      if (update < Math.abs(sum - target)) { // 绝对值 小于前3和之和就更新
        sum = newSum
      }else if(newSum < target) { // 3个之和小于 => 左指针右移
        left++
      } else { // 大于 => 有指针左移
        right--
      }
    }
  }
  return sum
};
// console.log(threeSumClosest([-1, 2, 1, -4], 1));
// console.log(threeSumClosest([0, 0, 0], 1));
// console.log(threeSumClosest([0, 0, 5,-5], 1));
console.log(threeSumClosest([833,736,953,-584,-448,207,128,-445,126,248,871,860,333,-899,463,488,-50,-331,903,575,265,162,-733,648,678,549,579,-172,-897,562,-503,-508,858,259,-347,-162,-505,-694,300,-40,-147,383,-221,-28,-699,36,-229,960,317,-585,879,406,2,409,-393,-934,67,71,-312,787,161,514,865,60,555,843,-725,-966,-352,862,821,803,-835,-635,476,-704,-78,393,212,767,-833,543,923,-993,274,-839,389,447,741,999,-87,599,-349,-515,-553,-14,-421,-294,-204,-713,497,168,337,-345,-948,145,625,901,34,-306,-546,-536,332,-467,-729,229,-170,-915,407,450,159,-385,163,-420,58,869,308,-494,367,-33,205,-823,-869,478,-238,-375,352,113,-741,-970,-990,802,-173,-977,464,-801,-408,-77,694,-58,-796,-599,-918,643,-651,-555,864,-274,534,211,-910,815,-102,24,-461,-146], -7111));