import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.793cb3e4.js";const A=JSON.parse('{"title":"小易","titleTemplate":"点滴纪录","description":"","frontmatter":{"title":"小易","titleTemplate":"点滴纪录"},"headers":[],"relativePath":"guide/test.md","lastUpdated":1722740948000}'),p={name:"guide/test.md"},o=l(`<h2 id="_2023-10-24" tabindex="-1"># 2023-10-24 <a class="header-anchor" href="#_2023-10-24" aria-label="Permalink to &quot;# 2023-10-24&quot;">​</a></h2><p>1024: 程序员节，这天我决定开始记录日常了。虽然不知道会坚持多久，但是先从今天开始吧。</p><ul><li>设计模式</li></ul><ol><li>观察者模式 主题（Subject）：主题维护一个观察者列表，当主题有更新时，通知所有观察者。并提供添加、移除订阅者的方法 观察者（Observer）： 观察者是订阅主题的对象，当主题有更新时，观察者会收到通知并做相应的处理（如更新状态） 举例：</li><li>张三和李四 都订阅了 同一个微信 订阅号，当订阅号有更新时，张三和李四都会收到推送通知。如果某天张三取消了订阅，那么只有李四收到推送通知了。</li><li>米粉们 订阅了 小米商城 商品，当小米商城有更新时，米粉会收到推送通知。</li></ol><p>应用场景：</p><ol start="2"><li>发布订阅模式</li></ol><h2 id="_2023-10-25" tabindex="-1"># 2023-10-25 <a class="header-anchor" href="#_2023-10-25" aria-label="Permalink to &quot;# 2023-10-25&quot;">​</a></h2><h3 id="力扣简单题-有效的括号" tabindex="-1">力扣简单题：有效的括号 <a class="header-anchor" href="#力扣简单题-有效的括号" aria-label="Permalink to &quot;力扣简单题：有效的括号&quot;">​</a></h3><p>题目：给定一个只包括 &#39;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&#39; 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ul><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>每个右括号都有一个对应的相同类型的左括号。</li></ul><p>示例 1：</p><p>输入：s = &quot;()&quot;<br> 输出：true 示例 2：</p><p>输入：s = &quot;()[]{}&quot;<br> 输出：true 示例 3：</p><p>输入：s = &quot;(]&quot;<br> 输出：false</p><p>提示：</p><ul><li>1 &lt;= s.length &lt;= 104</li><li>s 仅由括号 &#39;()[]{}&#39; 组成</li></ul><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">string</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">s</span><span style="color:#676E95;font-style:italic;">  &#39;()[]{}&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">return</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">boolean</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 思路：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 1.先判断字符串长度，奇数直接返回false</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 2. 遍历字符串，</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  遇到左括号入栈【对应的右括号，因为一会遇到右括号判断是否匹配】，遇到右括号出栈，如果出栈的括号不匹配，则返回false</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  最后判断栈是否为空，为空则返回true</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  比如： &#39;()[]&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  1. &#39;(&#39; 遇到左括号入栈  =&gt; [&#39;)&#39;]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  2. &#39;)&#39; 遇到右括号出栈  =&gt; 栈顶元素 &#39;)&#39;  =&gt; 与栈顶元素匹配 出栈： []</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  3. &#39;[&#39; 遇到左括号入栈  =&gt; [ &#39;]&#39; ]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  4. &#39;]&#39; 遇到右括号出栈  =&gt; 栈顶元素 &#39;]&#39;  =&gt; 与栈顶元素匹配 出栈： []</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  以此类推</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *  规律就是 遇到一个右括号 必须有匹配的左括号，否则返回false</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isValid</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">s</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">map</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">}</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">]</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">of</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">s</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">chart</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">map</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">item</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">chart</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">chart</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">top</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">top</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">isValid</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">({})</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="新鲜事儿" tabindex="-1">新鲜事儿 <a class="header-anchor" href="#新鲜事儿" aria-label="Permalink to &quot;新鲜事儿&quot;">​</a></h3><ol><li>语雀故障后续 福利 =&gt; 6个月会员 （已领）</li><li>政府发布： 2024年假日规则， 除夕貌似还要上班呢（xxxx)</li></ol>`,20),t=[o];function e(c,r,y,F,i,D){return a(),n("div",null,t)}const f=s(p,[["render",e]]);export{A as __pageData,f as default};
