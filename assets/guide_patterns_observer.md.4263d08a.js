import{_ as e,o as a,c as t,Q as s}from"./chunks/framework.48b60373.js";const m=JSON.parse('{"title":"观察者模式","titleTemplate":"设计模式","description":"","frontmatter":{"title":"观察者模式","titleTemplate":"设计模式"},"headers":[],"relativePath":"guide/patterns/observer.md","lastUpdated":1723908702000}'),r={name:"guide/patterns/observer.md"},l=s(`<h2 id="观察者模式" tabindex="-1">观察者模式 <a class="header-anchor" href="#观察者模式" aria-label="Permalink to &quot;观察者模式&quot;">​</a></h2><h3 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h3><p>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p><h3 id="角色" tabindex="-1">角色 <a class="header-anchor" href="#角色" aria-label="Permalink to &quot;角色&quot;">​</a></h3><ul><li>Subject：目标，被观察者，定义被观察者的行为，当被观察者的状态发生改变时，通知所有观察者</li><li>Observer：观察者，定义观察者的行为，当被观察者的状态发生改变时，观察者得到通知</li></ul><h3 id="代码" tabindex="-1">代码 <a class="header-anchor" href="#代码" aria-label="Permalink to &quot;代码&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"></span>
<span class="line"></span></code></pre></div>`,7),o=[l];function i(n,c,d,p,h,_){return a(),t("div",null,o)}const b=e(r,[["render",i]]);export{m as __pageData,b as default};
