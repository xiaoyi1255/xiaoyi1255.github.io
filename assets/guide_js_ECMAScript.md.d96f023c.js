import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.48b60373.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/js/ECMAScript.md","lastUpdated":1723908702000}'),t={name:"guide/js/ECMAScript.md"},p=l(`<h2 id="ecmascript是什么" tabindex="-1">ECMAScript是什么？ <a class="header-anchor" href="#ecmascript是什么" aria-label="Permalink to &quot;ECMAScript是什么？&quot;">​</a></h2><p>ECMAScript是由网景的布兰登·艾奇开发的一种脚本语言的标准化规范；最初命名为Mocha，后来改名为LiveScript，最后重命名为JavaScript。 ECMAScript是一种由Ecma国际（前身为欧洲计算机制造商协会，European Computer Manufacturers Association）通过ECMA-262标准化的脚本程序设计语言。</p><ul><li>ECMAScript是JavaScript的规范，JavaScript是ECMAScript的实现。</li></ul><h2 id="ecmascript的发展历程" tabindex="-1">ECMAScript的发展历程 <a class="header-anchor" href="#ecmascript的发展历程" aria-label="Permalink to &quot;ECMAScript的发展历程&quot;">​</a></h2><p>1997年，第一版ECMAScript发布，即ECMAScript 1.0。 1998年，发布ECMAScript 2.0，对语言进行了扩展。 1999年，发布ECMAScript 3.0，成为JavaScript的标准。 2007年，发布ECMAScript 4.0，但由于改动太大，被废弃。 2009年，发布ECMAScript 5.0，成为JavaScript的标准。 2015年，发布ECMAScript 6.0，即ES6，这是一次重要的更新，引入了类、模块、箭头函数、let/const 变量、模板字符串、Promise、解构赋值等。 2016年，发布ECMAScript 7.0，即ES7，新增了Array.prototype.includes 和指数操作符（**）。 2017年，发布ECMAScript 8.0，即ES8，引入了 async/await、Object.values/Object.entries 等。 2018年，发布ECMAScript 9.0，即ES9，包括异步迭代Promise.finally、for-await-of等。 2019年，发布ECMAScript 10.0，即ES10，flat\\mapFlat。 2020年，发布ECMAScript 11.0，即ES11，BigInt\\Promise.allSettled、import、可选链?.。 2021年，发布ECMAScript 12.0，即ES12，逻辑赋值运算符&amp;&amp;=、||=、??=、空值合并运算符??、Promise.any、String.prototype.replaceAll、WeakRef、FinalizationRegistry等。 2022年，发布ECMAScript 13.0，顶层await、Arrary.at、Object.hasOwn。</p><h2 id="ecmascript-6-0-es6" tabindex="-1">ECMAScript 6.0（ES6） <a class="header-anchor" href="#ecmascript-6-0-es6" aria-label="Permalink to &quot;ECMAScript 6.0（ES6）&quot;">​</a></h2><h3 id="_1-let和const" tabindex="-1">1. let和const <a class="header-anchor" href="#_1-let和const" aria-label="Permalink to &quot;1. let和const&quot;">​</a></h3><p>let和const是ES6新增的变量声明方式，用于替代var。 let声明的变量具有块级作用域，即只在声明它的代码块内有效。 const声明的变量具有块级作用域，且必须初始化，且不能重新赋值。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * var可以重复声明，let和const不能重复声明</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * var声明的变量会提升到作用域顶部，let和const不会提升</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * var声明的变量没有块级作用域，let和const有块级作用域</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// undefined,因为变量提升不会报错</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(b)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 报错：ReferenceError: Cannot access &#39;b&#39; before initialization</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// let b = 2; // 报错：Identifier &#39;b&#39; has already been declared</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(b)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(c)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 报错：ReferenceError: Cannot access &#39;c&#39; before initialization</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// const c = 2; // 报错：Identifier &#39;c&#39; has already been declared</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// c = 2; // 报错：Assignment to constant variable.</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(c)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"></span></code></pre></div><ul><li>注：var声明的变量、函数声明会有变量提升 S引擎的执行分为两个阶段，预解析阶段和执行阶段，预解析阶段就是创建一个函数执行环境，每个执行环境都会关联一个变量对象，环境中定义的变量、函数都会放在这个变量对象里面，创建变量对象的时候，它会扫描代码，找到所有的变量声明，然后把变量存入到变量对象里面，并赋值为undefined，这就导致的变量提升。</li></ul>`,10),o=[p];function e(c,r,i,A,y,C){return a(),n("div",null,o)}const F=s(t,[["render",e]]);export{E as __pageData,F as default};
