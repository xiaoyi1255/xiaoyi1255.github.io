import{_ as e,o as i,c as a,Q as l}from"./chunks/framework.4437bd85.js";const f=JSON.parse('{"title":"视频流项目优化","description":"","frontmatter":{"title":"视频流项目优化","highlight":"a11y-light","theme":"channing-cyan"},"headers":[],"relativePath":"guide/project/performanceOptimization.md","lastUpdated":1723541645000}'),t={name:"guide/project/performanceOptimization.md"},o=l('<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>本文主要实现：h5上的开屏广告的优化</p><p>简单理解：在原本的SSR项目上嵌套一个h5模板项目（类似开屏广告）</p><p>要求：</p><ol><li>开屏广告最快的时间出来，（原本的主流程可以滞后）</li><li>开屏广告可以关闭，关闭后，呈现原来的主项目流程</li><li>开屏广告一定在最上层</li><li>开屏广告是一个落地页，这个落地页渲染出来 要求可以直接能玩</li></ol><h2 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h2><p>最先想到的就两种实现方式：</p><ol><li>新开一个webview，webview渲染开屏广告，主流程接着走；（前提得有sdk支撑）</li><li>直接使用iframe，iframe渲染开屏广告，主流程接着走；（纯h5就能实现）</li></ol><p>先分析一下优缺点：</p><h3 id="新开webview" tabindex="-1">新开webview <a class="header-anchor" href="#新开webview" aria-label="Permalink to &quot;新开webview&quot;">​</a></h3><p>优点：</p><ol><li>开屏广告可以关闭，关闭后，呈现原来的主项目流程</li><li>开屏广告一定在最上层</li><li>实现起来最简单、方便（相对h5来说）</li></ol><p>缺点：</p><ol><li>需要有sdk支撑</li></ol><h3 id="iframe" tabindex="-1">iframe <a class="header-anchor" href="#iframe" aria-label="Permalink to &quot;iframe&quot;">​</a></h3><p>优点：</p><ol><li>纯h5就能实现</li><li>开屏广告可以关闭，关闭按钮，h5感知，（当然如果webview那种也可以消息通知） 缺点：</li><li>实现起来相对麻烦些：需要控制广告层级、关闭、主流程的延时渲染</li></ol><p>具体实现分析：</p>',18),r=[o];function n(p,h,c,s,d,_){return i(),a("div",null,r)}const b=e(t,[["render",n]]);export{f as __pageData,b as default};
